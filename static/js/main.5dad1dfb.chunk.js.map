{"version":3,"sources":["context.js","Services/Auth.js","Settings.js","Components/CurrencyDisplay.js","Components/ItemList.js","Components/Inventory.js","App.js","serviceWorker.js","index.js"],"names":["MainContext","React","createContext","TestAndSetAuth","dispatch","token","config","prefixUrl","hooks","beforeRequest","request","url","URL","search","URLSearchParams","searchParams","toString","set","Request","ky","get","json","then","data","type","value","api","create","id","name","localStorage","setItem","Settings","props","context","useContext","useState","state","setToken","formRef","useRef","autoComplete","ref","TextField","label","inputProps","required","onChange","e","target","Button","onClick","Array","prototype","reduce","call","current","a","v","validity","valid","catch","err","currencies","1","Math","floor","CurrencyDisplay","currencyData","setCurrencyData","useEffect","currency","hasOwnProperty","Promise","all","result","icon","style","display","justifyContent","alignItems","length","map","i","amount","imgSrc","src","width","height","SlotRow","Grid","container","direction","justify","item","xs","itemData","Typography","valueData","buys","unit_price","count","ItemList","itemDataList","setItemDataList","slots","items","slot","ids","Object","keys","join","forEach","datum","values","console","log","key","Inventory","selectedCharacter","setSelectedCharacter","characterList","setCharacterList","inventoryList","setInventoryList","update","setUpdate","encodeURI","bags","inventory","InputLabel","Select","MenuItem","App","timestamp","$gte","moment","startOf","toDate","$lt","endOf","filter","lastFilter","usePrevious","historicalWealth","setHistoricalWealth","db","collection","find","toArray","results","newHistoricalWealth","account_id","Date","wealth","path","flexDirection","dataKey","stroke","dot","Boolean","window","location","hostname","match","initialState","zango","Db","undefined","reducer","action","assign","Wrapper","useReducer","providerState","setProviderState","getWealth","forceUpdate","sort","limit","latestEntry","JSON","stringify","obj","insert","getItem","removeItem","newProviderState","setInterval","Provider","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5dad1dfb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const MainContext = React.createContext();","import ky from 'ky';\r\n\r\nconst gw2ApiBaseConfig = {\r\n    prefixUrl: 'https://api.guildwars2.com/'\r\n};\r\n\r\nexport function TestAndSetAuth(dispatch, token) {\r\n    let config = {\r\n        prefixUrl: 'https://api.guildwars2.com/',\r\n        hooks: {\r\n            beforeRequest: [\r\n                request => {\r\n                    let url = new URL(request.url);\r\n                    let search = new URLSearchParams(url.searchParams.toString());\r\n                    search.set(\"access_token\", token);\r\n                    url.search = search;\r\n                    \r\n                    return new Request(url, request);\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    return ky.get('v2/account', config).json()\r\n    .then(data=>{\r\n        dispatch({\r\n            type: \"mergeState\",\r\n            value: {\r\n                api: ky.create(config),\r\n                token,\r\n                id: data.id,\r\n                name: data.name,\r\n            }\r\n        })\r\n\r\n        localStorage.setItem('token', token);\r\n    });\r\n}","import React, { useContext, useRef, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { MainContext } from './context';\r\nimport { TestAndSetAuth } from './Services/Auth';\r\n\r\nexport function Settings(props) {\r\n    const context = useContext(MainContext);\r\n    const [token, setToken] = useState(context.state.token || \"\");\r\n    const inputRef = useRef(null);\r\n    const formRef = useRef(null);\r\n\r\n    function onSubmit() {\r\n        let valid = Array.prototype.reduce.call(formRef.current, (a,v)=>v.validity.valid && a, true);\r\n        if(!valid) return;\r\n\r\n        TestAndSetAuth(context.dispatch, token)\r\n        .catch(err=>{\r\n            setToken(\"\");\r\n        });\r\n    }\r\n\r\n    return(\r\n        <form autoComplete=\"off\"\r\n            ref={formRef}\r\n        >\r\n            <TextField label=\"API Key\"\r\n                value={token}\r\n                inputProps={{\r\n                    required: true\r\n                }}\r\n\r\n                onChange={(e)=>setToken(e.target.value)}\r\n            />\r\n\r\n            <Button onClick={onSubmit}>\r\n                Set\r\n            </Button>\r\n        </form>\r\n    );\r\n}","import React, {useState, useEffect, useContext} from 'react';\r\nimport { MainContext } from '../context';\r\n\r\nconst currencies = {\r\n    1: (value) => {\r\n        if(value > 10000)\r\n            return [\r\n                [Math.floor(value / 10000), \"https://render.guildwars2.com/file/090A980A96D39FD36FBB004903644C6DBEFB1FFB/156904.png\"],\r\n                [Math.floor((value / 100) % 100), \"https://render.guildwars2.com/file/E5A2197D78ECE4AE0349C8B3710D033D22DB0DA6/156907.png\"],\r\n                [value % 100, \"https://render.guildwars2.com/file/6CF8F96A3299CFC75D5CC90617C3C70331A1EF0E/156902.png\"]\r\n            ]\r\n        else if(value > 100) \r\n            return [\r\n                [Math.floor((value / 100) % 100), \"https://render.guildwars2.com/file/E5A2197D78ECE4AE0349C8B3710D033D22DB0DA6/156907.png\"],\r\n                [value % 100, \"https://render.guildwars2.com/file/6CF8F96A3299CFC75D5CC90617C3C70331A1EF0E/156902.png\"]\r\n            ]\r\n        else\r\n            return [\r\n                [value, \"https://render.guildwars2.com/file/6CF8F96A3299CFC75D5CC90617C3C70331A1EF0E/156902.png\"]\r\n            ]\r\n    }\r\n}\r\n\r\nfunction getCurrencyData(currency, api) {\r\n    if(currencies.hasOwnProperty(currency.id))\r\n        return Promise.all(currencies[currency.id](currency.value));\r\n    else\r\n        return Promise.all([\r\n            Promise.all([currency.value, api.get(`v2/currencies?ids=${currency.id}`).json().then(result=>result.icon)])\r\n        ]);\r\n}\r\n\r\nexport function CurrencyDisplay(props) {\r\n    let context = useContext(MainContext);\r\n\r\n    let [currencyData, setCurrencyData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        getCurrencyData(props.currency, context.state.api)\r\n        .then(setCurrencyData);\r\n    }, [props.currency]);\r\n\r\n    return(\r\n        <div style={{display:'flex', justifyContent:'center', alignItems:'center'}}>\r\n            {currencyData.length\r\n            ? currencyData.map(([amount, imgSrc], i)=>\r\n            <>\r\n                <p>{amount}</p>\r\n                <img src={imgSrc} style={{width:'1.5rem', height:'1.5rem'}}/>\r\n            </>\r\n            )\r\n            : null}\r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useContext} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {CurrencyDisplay} from './CurrencyDisplay';\r\nimport { MainContext } from '../context';\r\n\r\nfunction SlotRow(props) {\r\n    if(props.data) {\r\n        return(\r\n            <Grid \r\n                container \r\n                direction=\"row\" \r\n                justify=\"space-between\"\r\n                alignItems=\"stretch\"\r\n            >\r\n                <Grid item xs={1}>\r\n                    <img style={{height:'100%', width:'100%'}} src={props.data.itemData.icon} />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <Typography>\r\n                        {props.data.itemData.name}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    { props.data.valueData\r\n                    ? <CurrencyDisplay currency={{id: 1, value: props.data.valueData.buys.unit_price}} />\r\n                    : null\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Typography>\r\n                        {props.data.count}\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    { props.data.valueData\r\n                    ? <CurrencyDisplay currency={{id: 1, value: (props.data.valueData.buys.unit_price * props.data.count)}} />\r\n                    : null\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function ItemList(props) {\r\n    const context = useContext(MainContext);\r\n    let [itemDataList, setItemDataList] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        if(!props.slots || props.slots.length == 0) {\r\n            setItemDataList([]);\r\n            return;\r\n        }\r\n\r\n        let items = props.slots.reduce((a,slot)=>{\r\n            if(slot) {\r\n                if(a.hasOwnProperty(slot.id)) {\r\n                    a[slot.id].count += slot.count;\r\n                }\r\n                else {\r\n                    a[slot.id] = {\r\n                        id: slot.id,\r\n                        count: slot.count\r\n                    };\r\n                }\r\n            }\r\n            return a;\r\n        }, {});\r\n\r\n        let ids = Object.keys(items).join(',');\r\n        Promise.all([\r\n            context.state.api.get(`v2/items?ids=${ids}`).json(),\r\n            context.state.api.get(`v2/commerce/prices?ids=${ids}`).json()\r\n        ])\r\n        .then(([itemData, valueData])=>{\r\n            itemData.forEach(datum=>{\r\n                items[datum.id].itemData = datum;\r\n            })\r\n            valueData.forEach(datum=>{\r\n                items[datum.id].valueData = datum;\r\n            })\r\n\r\n            setItemDataList(Object.values(items));\r\n        })\r\n    }, [props.slots]);\r\n\r\n    console.log(itemDataList);\r\n    return itemDataList.map((item,i)=>\r\n        item && item.valueData\r\n        ? <SlotRow key={i} data={item} />\r\n        : null\r\n    );\r\n}","import React, {useState, useContext, useEffect} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/Menuitem';\r\nimport { ItemList } from './ItemList';\r\nimport { MainContext } from '../context';\r\n\r\nexport function Inventory(props) {\r\n    let context = useContext(MainContext);\r\n    let [selectedCharacter, setSelectedCharacter] = useState(\"\");\r\n    let [characterList, setCharacterList] = useState([]);\r\n    let [inventoryList, setInventoryList] = useState([]);\r\n    let [update, setUpdate] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        context.state.api.get('v2/characters').json()\r\n        .then(setCharacterList);\r\n    }, [context.id]);\r\n\r\n    useEffect(()=>{\r\n        if(!selectedCharacter) {\r\n            setInventoryList([]);\r\n        }\r\n        else {\r\n            context.state.api.get(`v2/characters/${encodeURI(selectedCharacter)}/inventory`).json()\r\n            .then(({bags})=>\r\n                setInventoryList(bags.reduce((a,v)=>[...a, ...v.inventory], []))\r\n            );\r\n        }\r\n        setUpdate(false);\r\n    }, [selectedCharacter, context.id]);\r\n\r\n    useEffect(()=>{\r\n        setSelectedCharacter(selectedCharacter);\r\n    }, [update]);\r\n\r\n    return(\r\n        <div>\r\n            <div>\r\n                <InputLabel>Character</InputLabel>\r\n                <Select\r\n                    value={selectedCharacter}\r\n                    onChange={e=>setSelectedCharacter(e.target.value)}\r\n                >\r\n                    {characterList.map(v=>\r\n                        <MenuItem key={v} value={v}>{v}</MenuItem>\r\n                    )}\r\n                </Select>\r\n                <Button onClick={()=>setUpdate(true)}>Refresh</Button>\r\n            </div>\r\n            <ItemList slots={inventoryList} />\r\n        </div>\r\n    );\r\n}","import React, {useContext, useState, useEffect, useRef} from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Brush } from 'recharts';\nimport moment from 'moment';\nimport { MainContext } from './context';\nimport { Settings } from './Settings';\nimport {CurrencyDisplay} from './Components/CurrencyDisplay';\nimport {Inventory} from './Components/Inventory';\n\n//https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(()=>{\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction App() {\n  const context = useContext(MainContext);\n  const [filter, setFilter] = useState({\n    timestamp: {\n      $gte: moment().startOf('day').toDate(),\n      $lt: moment().endOf('day').toDate()\n    }\n  });\n  const lastFilter = usePrevious(filter);\n  const [historicalWealth, setHistoricalWealth] = useState([]);\n\n  useEffect(()=>{\n    if(lastFilter !== filter) {\n      context.state.db.collection('wealth').find(filter)\n      .toArray()\n      .then(results=>{\n        setHistoricalWealth(results);\n      })\n    }\n    else {\n      let newHistoricalWealth = [...historicalWealth, {\n        account_id: context.state.id,\n        timestamp: new Date(),\n        data: context.state.wealth\n      }];\n      console.log(newHistoricalWealth);\n      setHistoricalWealth(newHistoricalWealth);\n    }\n  }, [filter, context.state.wealth]);\n\n  return (\n    <Router>\n      <Switch>\n        {context.state.id &&\n          <Route path=\"/\">\n            <h1>\n              Hello World\n              <img src=\"https://static.staticwars.com/quaggans/construction.jpg\" style={{height:\"3rem\", width:\"3rem\"}}/>\n            </h1>\n            {context.state.wealth &&\n              <div style={{display:'flex', flexDirection:'row'}}>\n                <CurrencyDisplay currency={context.state.wealth[0]} api={context.state.api} />\n                <LineChart width={100} height={50}\n                  data={historicalWealth}\n                >\n                  <Line type=\"monotone\" dataKey={v=>v.data[0].value} stroke=\"#FFA71A\" dot={false}/>\n                </LineChart>\n              </div>\n            }\n            <Inventory />\n          </Route>\n        }\n        <Route path=\"/\">\n          <Settings />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useReducer, useContext, useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport zango from 'zangodb';\nimport {MainContext} from './context';\nimport './index.css';\nimport App from './App';\nimport { TestAndSetAuth } from './Services/Auth';\nimport * as serviceWorker from './serviceWorker';\n\nconst initialState = {\n  db: new zango.Db('db', 2, {wealth: ['account_id', 'timestamp']}),\n  api: undefined,\n  token: undefined,\n  id: undefined,\n  name: undefined\n};\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    case \"mergeState\":\n      return Object.assign({}, state, action.value);\n    default:\n      return state;\n  }\n}\n\nfunction Wrapper(props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [providerState, setProviderState] = useState({state, dispatch});\n\n  function getWealth(forceUpdate=false) {\n    Promise.all([\n      state.db.collection('wealth').find().sort({timestamp:-1}).limit(1).toArray(),\n      state.api.get('v2/account/wallet').json()\n    ])\n    .then(([[latestEntry], data])=>{\n      if(!latestEntry || JSON.stringify(latestEntry.data) != JSON.stringify(data)) {\n        let obj = {\n          account_id: state.id,\n          timestamp: new Date(),\n          data\n        };\n        state.db.collection('wealth').insert(obj);\n        console.log(obj);\n\n        dispatch({type:\"mergeState\", value:{\n          wealth: data\n        }});\n      }\n      else if(forceUpdate) {\n        dispatch({type:\"mergeState\", value:{\n          wealth: data\n        }});\n      }\n    })\n  }\n\n  useEffect(()=>{\n    state.db.collection('wealth').find().toArray().then(console.log);\n    let token = window.localStorage.getItem('token');\n\n    if(token) {\n      TestAndSetAuth(dispatch, token)\n      .catch(err=>{\n        window.localStorage.removeItem('token');\n      });\n    }\n  }, []);\n\n  useEffect(()=>{\n    console.log(state);\n    let newProviderState = {state, dispatch};\n    setProviderState(newProviderState);\n    window.providerState = newProviderState;\n  }, [state]);\n\n  useEffect(()=>{\n    if(!state.api) return;\n\n    getWealth(true);\n    setInterval(getWealth, 60000);\n  }, [state.api]);\n\n  return(\n    <MainContext.Provider value={providerState}>\n      <App/>\n    </MainContext.Provider>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}